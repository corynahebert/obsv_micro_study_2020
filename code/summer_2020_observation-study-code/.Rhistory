setwd("C:\Users\Coryna\Documents\Wetlan_USU\Summer 2020 Observational Study\data\raw"
)
setwd("C:\Users\Coryna\Documents\Wetlan_USU\Summer
2020 Observational Study\data\raw")
setwd("C:/Users/Coryna/Documents/Wetlan_USU/Summer
2020 Observational Study/data/raw")
setwd(C:/Users/Coryna/Documents/Wetlan_USU/Summer
2020 Observational Study/data/raw)
setwd(C:/Users/Coryna/Documents/Wetlan_USU/Summer
2020 Observational Study/data/raw)
micro <- read.csv("micro_measurements.csv")
setwd("C:/Users/Coryna/Documents/Wetlan_USU/2020_observational_study/data/raw")
micro <- read.csv("micro_measurements.csv")
str(micro)
library(tidyverse)
library("RColorBrewer")
micro_measurements <- micro %>%
dplyr::summarise(roughness = (pin_profile_length_cm/profilometer_width_cm),
relief = (max_pin))
micro_measurements <- micro %>%
dplyr::summarise(roughness = (pin_profile_length_cm/profilometer_width_cm),
relief = (max_pin_height_cm-min_pin_height_cm))
micro_measurements
View(micro_measurements)
install.packages("data.table")
library(data.table)
library(ggplot2)
library(ggfortify)
install.packages("data.table")
plant_data <- fread("line_point_data.csv", stringsAsFactors = FALSE)
topo_data <- fread("micro_measurements.csv", stringsAsFactors = FALSE)
install.packages("data.table")
library(data.table)
library(ggplot2)
library(ggfortify)
plant_data <- fread("line_point_data.csv", stringsAsFactors = FALSE)
topo_data <- fread("micro_measurements.csv", stringsAsFactors = FALSE)
setwd("C:/Users/Coryna/Documents/Wetlan_USU/2020_observational_study/data/raw")
plant_data <- fread("line_point_data.csv", stringsAsFactors = FALSE)
topo_data <- fread("micro_measurements.csv", stringsAsFactors = FALSE)
# calculating topo variables
topo_data[, relief := max_pin_height_cm-min_pin_height_cm]
topo_data[, roughness := pin_profile_length_cm/profilometer_width_cm]
hist(topo_data$relief) # you probably want to invesitgate that negative relief value
plant_data <- fread("line_point_data.csv", stringsAsFactors = FALSE)
topo_data <- fread("micro_measurements.csv", stringsAsFactors = FALSE)
# calculating topo variables
topo_data[, relief := max_pin_height_cm-min_pin_height_cm]
topo_data[, roughness := pin_profile_length_cm/profilometer_width_cm]
hist(topo_data$relief) # you probably want to invesitgate that negative relief value
hist(topo_data$roughness) # and those roughness values below 1
# cleaning plant data
plant_data[top_layer %in% c("NONE", "NOE", "NOINE", "NON"), "top_layer"] <- NA
# cleaning plant data
plant_data[top_layer %in% c("NONE", "NOE", "NOINE", "NON"), "top_layer"] <- NA
plant_data[top_layer %in% c("DISIP", "DISPNONE", "DSIP"), "top_layer"] <- "DISP"
# site and species lists
sites <- sort(unique(plant_data$site_id))
species <- sort(unique(plant_data$top_layer))
plant_comm <- data.table(site = sites) # initializing up a master table
# summarizing species occurence data into a tidy "plant_comm" table with one column per species
for(sp in species){
#sp <- species[1]
sp_records <- plant_data[top_layer == sp, ] # pull out data for just one species - I used only the top_layer data
sp_props <- table(sp_records$site_id)/150 # get relative proportion... there's 150 total plant measurements per site, right?
site_props <- data.table(site = sites,
sp_prop = 0) # just setting up a temporary site & species proportion data table to keep things organized
site_props[which(site_props$site %in% names(sp_props)), "sp_prop"] <- sp_props # inserting the species proportions
plant_comm[,sp] <- site_props$sp_prop # adding in a new column into the "plant_comm" table with the calculated proportions
}
# function to pull out relief and roughness data by site
get.topo <- function(site, var){
#site <- sites[1]
if(var == "relief") relevant_data <- topo_data[site_id == site, relief]
if(var == "roughness") relevant_data <- topo_data[site_id == site, roughness]
return(median(relevant_data, na.rm=T)) # median so that single outliers don't derail average
}
# get median relief and roughness at each site
plant_comm$relief <- mapply(get.topo, site=sites, var="relief")
plant_comm$roughness <- mapply(get.topo, site=sites, var="roughness")
# getting rid of sites with NAs in topo variables
plant_comm <- na.omit(plant_comm)
# does it look about right?
plant_comm
view(plant_comm)
# PCA with all species percentages and topography
pca_all <- prcomp(plant_comm[, -1])
autoplot(pca_all,  loadings=T, loadings.label=T,
colour = "relief") # relief explains most of the variation, but nothing else strongly covaries with it
summary(pca_all)
relief_model <- lm(relief ~ PHRAG + DISP, data=plant_comm)
par(mfrow=c(1,2))
visreg(relief_model)
summary(relief_model) # looks like there might be relationships, but they're not significant at least when modeled like this
roughness_model <- lm(roughness ~ PHRAG + DISP, data=plant_comm)
visreg(roughness_model)
summary(roughness_model) # DISP actually significantly predicts roughness! (at alpha=0.05)
install.packages("visreg")
library(visreg)
relief_model <- lm(relief ~ PHRAG + DISP, data=plant_comm)
visreg(relief_model)
roughness_model <- lm(roughness ~ PHRAG + DISP + SCAM, data=plant_comm)
visreg(roughness_model)
visreg(relief_model)
relief_model <- lm(relief ~ PHRAG + DISP, data=plant_comm)
par(mfrow=c(2,2))
visreg(relief_model)
relief_model <- lm(relief ~ PHRAG + DISP + SCAM, data=plant_comm)
par(mfrow=c(2,2))
visreg(relief_model)
summary(relief_model) # looks like there might be relationships, but they're not significant at least when modeled like this
relief_model <- lm(relief ~ PHRAG + DISP + SCAM + TYPHA, data=plant_comm)
par(mfrow=c(2,2))
visreg(relief_model)
summary(relief_model) # looks like there might be relationships, but they're not significant at least when modeled like this
library(DBI)
library(RSQLite)
library(DBI)
library(RSQLite)
knitr::opts_chunk$set(echo = TRUE)
library(DBI)
library(RSQLite)
observational_db <- dbConnect(RSQLite::SQLite(), "../../2020_observational_study/data/observational.db")
observational_db <- dbConnect(RSQLite::SQLite(), "../../2020_observational_study/data/raw/observational.db")
observational_db <- dbConnect(RSQLite::SQLite(),
"C:/Users/Coryna/Documents/Wetlan_USU/2020_observational_study/data/observational.db")
dbExecute(observational_db, "CREATE TABLE plants (
date varchar(5) NOT NULL,
site_id varchar(10),
line char(1) CHECK,
direction varchar(50),
point,
top_code, varchar(6),
code_1, varchar(6),
code_2, varchar(6),
code_3, varchar(6),
soil_surface varchar(5),
PRIMARY KEY (site_id)
);")
dbExecute(observational_db, "CREATE TABLE plants (
date varchar(5) NOT NULL,
site_id varchar(10),
line char(1) CHECK,
direction varchar(50),
point varchar(2),
top_code varchar(6),
code_1 varchar(6),
code_2 varchar(6),
code_3 varchar(6),
soil_surface varchar(5),
PRIMARY KEY (site_id)
);")
dbExecute(observational_db, "CREATE TABLE plants (
date varchar(5) NOT NULL,
site_id varchar(10),
line char(1),
direction varchar(50),
point varchar(2),
top_code varchar(6),
code_1 varchar(6),
code_2 varchar(6),
code_3 varchar(6),
soil_surface varchar(5),
PRIMARY KEY (site_id)
);")
dbExecute(observational_db, "CREATE TABLE micro (
date varchar(5) NOT NULL,
site_id varchar(10),
direction varchar(5),
meter_start varchar(3),
meter_end varchar(3),
profilometer_wdith_cm varchar(10),
pin_profile_length_cm varchar(10),
max_pin_height varchar(10),
min_pin_height varchar(10),
notes varchar(50)
PRIMARY KEY (site_id)
);")
dbExecute(observational_db, "CREATE TABLE micro (
date varchar(5) NOT NULL,
site_id varchar(10),
direction varchar(5),
meter_start varchar(3),
meter_end varchar(3),
profilometer_wdith_cm varchar(10),
pin_profile_length_cm varchar(10),
max_pin_height varchar(10),
min_pin_height varchar(10),
notes varchar(50),
PRIMARY KEY (site_id)
);")
plants <- read.csv("line_point_data.csv",
stringsAsFactors = FALSE)
plants <- read.csv("line_point_data.csv",
stringsAsFactors = FALSE)
setwd("~/Wetlan_USU/2020_observational_study/data/raw")
plants <- read.csv("line_point_data.csv",
stringsAsFactors = FALSE)
dbExecute(observational_db, "CREATE TABLE plants (
date varchar(5) NOT NULL,
site_id varchar(10) NOT NULL,
line char(1),
direction varchar(50),
point varchar(2),
top_code varchar(6),
code_1 varchar(6),
code_2 varchar(6),
code_3 varchar(6),
soil_surface varchar(5),
PRIMARY KEY (site_id)
);")
plants <- read.csv("line_point_data.csv",
stringsAsFactors = FALSE)
head(plants)
dbExecute(observational_db, "CREATE TABLE plants (
date varchar(5) NOT NULL,
site_id varchar(10) NOT NULL,
line char(1),
direction varchar(50),
point varchar(2),
top_code varchar(6),
code_1 varchar(6),
code_2 varchar(6),
code_3 varchar(6),
soil_surface varchar(5),
PRIMARY KEY (site_id)
);")
plants <- read.csv("line_point_data.csv",
stringsAsFactors = FALSE)
micro <- read.csv("micro_measurements.csv",
stringsAsFactors = FALSE)
plants <- read.csv("line_point_data.csv",
stringsAsFactors = FALSE)
install.packages("bookdown")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(tidyverse)
library(DBI)
library(RSQLite)
